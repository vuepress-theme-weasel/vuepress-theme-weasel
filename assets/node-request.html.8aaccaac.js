import{_ as n,e as s}from"./app.f3af98d4.js";const a={},t=s(`<p>request \u662Fnodejs\u6700\u5E38\u7528\u7684\u5E93\u4E4B\u4E00\uFF0C\u5927\u591A\u65F6\u5019\u6211\u4EEC\u662F\u9700\u8981\u5C06\u5176promise\u5316\u7684\u65B9\u4FBF\u6211\u4EEC\u7684\u9879\u76EE\u4F7F\u7528\uFF0C\u5177\u4F53\u7684\u5C01\u88C5\u5982\u4E0B\uFF1A</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> request <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span> <span class="token string">&#39;request&#39;</span> <span class="token punctuation">)</span>
<span class="token keyword">const</span> query <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span> <span class="token string">&#39;qs&#39;</span> <span class="token punctuation">)</span>

<span class="token doc-comment comment">/**
 * http \u8BF7\u6C42\u5C01\u88C5
 * <span class="token keyword">@param</span>    <span class="token class-name"><span class="token punctuation">{</span><span class="token punctuation">[</span>string<span class="token punctuation">]</span><span class="token punctuation">}</span></span>                     <span class="token parameter">type</span>   [\u8BF7\u6C42\u7C7B\u578B]
 * <span class="token keyword">@param</span>    <span class="token class-name"><span class="token punctuation">{</span><span class="token punctuation">[</span>string<span class="token punctuation">]</span><span class="token punctuation">}</span></span>                     <span class="token parameter">url</span>    [\u8BF7\u6C42\u5730\u5740]
 * <span class="token keyword">@param</span>    <span class="token class-name"><span class="token punctuation">{</span><span class="token punctuation">[</span>json/array<span class="token punctuation">]</span><span class="token punctuation">}</span></span>                 <span class="token parameter">data</span>   [\u8BF7\u6C42\u6570\u636E]
 * <span class="token keyword">@param</span>    <span class="token class-name"><span class="token punctuation">{</span><span class="token punctuation">[</span>object<span class="token punctuation">]</span><span class="token punctuation">}</span></span>                     <span class="token parameter">header</span> [\u8BF7\u6C42header]
 * <span class="token keyword">@param</span>    <span class="token class-name"><span class="token punctuation">{</span><span class="token punctuation">[</span>bool<span class="token punctuation">]</span><span class="token punctuation">}</span></span>                       <span class="token parameter">debug</span>  [\u662F\u5426\u6253\u5370\u8BF7\u6C42\u4FE1\u606F]
 * <span class="token keyword">@return</span>   <span class="token class-name"><span class="token punctuation">{</span><span class="token punctuation">[</span>promise<span class="token punctuation">]</span><span class="token punctuation">}</span></span>                            [promise]
 * @Author:  slade
 * @DateTime :2017-09-15T10:30:42+080
 */</span>
<span class="token keyword">export</span> <span class="token keyword">const</span> httpRequest <span class="token operator">=</span> <span class="token punctuation">(</span> url<span class="token punctuation">,</span> data <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> type <span class="token operator">=</span> <span class="token string">&#39;GET&#39;</span><span class="token punctuation">,</span> header <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> debug <span class="token operator">=</span> <span class="token boolean">false</span> <span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
	<span class="token comment">// \u6570\u636E</span>
	<span class="token keyword">let</span> options <span class="token operator">=</span> <span class="token punctuation">{</span>
		<span class="token literal-property property">url</span><span class="token operator">:</span> url<span class="token punctuation">,</span>
		<span class="token literal-property property">headers</span><span class="token operator">:</span> header<span class="token punctuation">,</span>
		<span class="token literal-property property">method</span><span class="token operator">:</span> type
	<span class="token punctuation">}</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span> type<span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token string">&#39;post&#39;</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span>
		options <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span> options<span class="token punctuation">,</span> <span class="token punctuation">{</span>
			<span class="token literal-property property">form</span><span class="token operator">:</span> data
		<span class="token punctuation">}</span> <span class="token punctuation">)</span>
	<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span> type<span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token string">&#39;get&#39;</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span>
		options<span class="token punctuation">.</span>url <span class="token operator">=</span> url <span class="token operator">+</span> <span class="token string">&#39;?&#39;</span> <span class="token operator">+</span> query<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span> data <span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
	<span class="token comment">// console.log(&#39;\u8BF7\u6C42\u53C2\u6570&#39;,options)</span>
	<span class="token comment">// \u8C03\u7528</span>
	<span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span> <span class="token punctuation">(</span> <span class="token parameter">resolve<span class="token punctuation">,</span> reject</span> <span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
		<span class="token function">request</span><span class="token punctuation">(</span> options<span class="token punctuation">,</span> <span class="token punctuation">(</span> <span class="token parameter">error<span class="token punctuation">,</span> response<span class="token punctuation">,</span> body</span> <span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
			<span class="token keyword">if</span> <span class="token punctuation">(</span> debug <span class="token punctuation">)</span> <span class="token punctuation">{</span>
				console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> <span class="token string">&#39;\u8BF7\u6C42\u8FD4\u56DE\\n&#39;</span><span class="token punctuation">,</span> response <span class="token punctuation">)</span>
				console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> <span class="token string">&#39;\u8BF7\u6C42\u8FD4\u56DE\u5185\u5BB9\\n&#39;</span><span class="token punctuation">,</span> body <span class="token punctuation">)</span>
				console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span> <span class="token string">&#39;\u8BF7\u6C42\u9519\u8BEF\\n&#39;</span><span class="token punctuation">,</span> error <span class="token punctuation">)</span>
			<span class="token punctuation">}</span>
			<span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token operator">!</span>error <span class="token operator">&amp;&amp;</span> response<span class="token punctuation">.</span>statusCode <span class="token operator">==</span> <span class="token number">200</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span>
				<span class="token keyword">try</span> <span class="token punctuation">{</span>
					<span class="token keyword">var</span> info <span class="token operator">=</span> <span class="token keyword">typeof</span> body <span class="token operator">===</span> <span class="token string">&#39;Object&#39;</span> <span class="token operator">?</span> body <span class="token operator">:</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span> body <span class="token punctuation">)</span>
					<span class="token function">resolve</span><span class="token punctuation">(</span> info <span class="token punctuation">)</span>
				<span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span> e <span class="token punctuation">)</span> <span class="token punctuation">{</span>
					console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> <span class="token string">&#39;\u8BF7\u6C42\u8FD4\u56DE\u5185\u5BB9\\n&#39;</span><span class="token punctuation">,</span> body <span class="token punctuation">)</span>
					<span class="token function">reject</span><span class="token punctuation">(</span> e <span class="token punctuation">)</span>
				<span class="token punctuation">}</span>
			<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
				console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> <span class="token string">&#39;\u8BF7\u6C42\u8FD4\u56DE\u5185\u5BB9\\n&#39;</span><span class="token punctuation">,</span> body <span class="token punctuation">)</span>
				<span class="token function">reject</span><span class="token punctuation">(</span> error <span class="token punctuation">)</span>
			<span class="token punctuation">}</span>
		<span class="token punctuation">}</span> <span class="token punctuation">)</span>
	<span class="token punctuation">}</span> <span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>typescript\u7248\u672C\uFF1A</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">import</span> request <span class="token keyword">from</span> <span class="token string">&#39;request&#39;</span>
<span class="token keyword">import</span> query <span class="token keyword">from</span> <span class="token string">&#39;qs&#39;</span>

<span class="token keyword">type</span> <span class="token class-name">TRequestType</span> <span class="token operator">=</span> <span class="token string">&#39;GET&#39;</span> <span class="token operator">|</span> <span class="token string">&#39;POST&#39;</span>

<span class="token doc-comment comment">/**
 * http \u8BF7\u6C42\u5C01\u88C5
 * <span class="token keyword">@param</span>    <span class="token punctuation">{</span>[string]<span class="token punctuation">}</span>                     type   [\u8BF7\u6C42\u7C7B\u578B]
 * <span class="token keyword">@param</span>    <span class="token punctuation">{</span>[string]<span class="token punctuation">}</span>                     url    [\u8BF7\u6C42\u5730\u5740]
 * <span class="token keyword">@param</span>    <span class="token punctuation">{</span>[json/array]<span class="token punctuation">}</span>                 data   [\u8BF7\u6C42\u6570\u636E]
 * <span class="token keyword">@param</span>    <span class="token punctuation">{</span>[object]<span class="token punctuation">}</span>                     header [\u8BF7\u6C42header]
 * <span class="token keyword">@param</span>    <span class="token punctuation">{</span>[bool]<span class="token punctuation">}</span>                       debug  [\u662F\u5426\u6253\u5370\u8BF7\u6C42\u4FE1\u606F]
 * <span class="token keyword">@return</span>   <span class="token punctuation">{</span>[promise]<span class="token punctuation">}</span>                            [promise]
 * @Author:  slade
 * @DateTime :2017-09-15T10:30:42+080
 */</span>
<span class="token keyword">export</span> <span class="token keyword">const</span> httpRequest <span class="token operator">=</span> <span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token operator">=</span> <span class="token builtin">any</span><span class="token operator">&gt;</span><span class="token punctuation">(</span>
  url<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span>
  data<span class="token operator">:</span> <span class="token builtin">any</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
  type<span class="token operator">:</span> TRequestType <span class="token operator">=</span> <span class="token string">&#39;GET&#39;</span><span class="token punctuation">,</span>
  header<span class="token operator">:</span> Record<span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token builtin">string</span><span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
  debug<span class="token operator">:</span> <span class="token builtin">boolean</span> <span class="token operator">=</span> <span class="token boolean">false</span>
<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Promise</span><span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
	<span class="token comment">// \u6570\u636E</span>
	<span class="token keyword">let</span> options <span class="token operator">=</span> <span class="token punctuation">{</span>
		url<span class="token operator">:</span> url<span class="token punctuation">,</span>
		headers<span class="token operator">:</span> header<span class="token punctuation">,</span>
		method<span class="token operator">:</span> type
	<span class="token punctuation">}</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span> type<span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token string">&#39;post&#39;</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span>
		options <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span> options<span class="token punctuation">,</span> <span class="token punctuation">{</span>
			form<span class="token operator">:</span> data
		<span class="token punctuation">}</span> <span class="token punctuation">)</span>
	<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span> type<span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token string">&#39;get&#39;</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span>
		options<span class="token punctuation">.</span>url <span class="token operator">=</span> url <span class="token operator">+</span> <span class="token string">&#39;?&#39;</span> <span class="token operator">+</span> query<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span> data <span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
	<span class="token comment">// console.log(&#39;\u8BF7\u6C42\u53C2\u6570&#39;,options)</span>
	<span class="token comment">// \u8C03\u7528</span>
	<span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name"><span class="token builtin">Promise</span></span><span class="token punctuation">(</span> <span class="token punctuation">(</span> resolve<span class="token punctuation">,</span> reject <span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
		<span class="token function">request</span><span class="token punctuation">(</span> options<span class="token punctuation">,</span> <span class="token punctuation">(</span> error<span class="token operator">:</span> Error<span class="token punctuation">,</span> response<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">,</span> body<span class="token operator">:</span> <span class="token builtin">unknown</span> <span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
			<span class="token keyword">if</span> <span class="token punctuation">(</span> debug <span class="token punctuation">)</span> <span class="token punctuation">{</span>
				<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> <span class="token string">&#39;\u8BF7\u6C42\u8FD4\u56DE\\n&#39;</span><span class="token punctuation">,</span> response <span class="token punctuation">)</span>
				<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> <span class="token string">&#39;\u8BF7\u6C42\u8FD4\u56DE\u5185\u5BB9\\n&#39;</span><span class="token punctuation">,</span> body <span class="token punctuation">)</span>
				<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span> <span class="token string">&#39;\u8BF7\u6C42\u9519\u8BEF\\n&#39;</span><span class="token punctuation">,</span> error <span class="token punctuation">)</span>
			<span class="token punctuation">}</span>
			<span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token operator">!</span>error <span class="token operator">&amp;&amp;</span> response<span class="token punctuation">.</span>statusCode <span class="token operator">==</span> <span class="token number">200</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span>
				<span class="token keyword">try</span> <span class="token punctuation">{</span>
					<span class="token keyword">var</span> info <span class="token operator">=</span> <span class="token keyword">typeof</span> body <span class="token operator">===</span> <span class="token string">&#39;object&#39;</span> <span class="token operator">?</span> body <span class="token operator">:</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span> body <span class="token keyword">as</span> <span class="token builtin">string</span> <span class="token punctuation">)</span>
					<span class="token function">resolve</span><span class="token punctuation">(</span> info <span class="token punctuation">)</span>
				<span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span> e <span class="token punctuation">)</span> <span class="token punctuation">{</span>
					<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> <span class="token string">&#39;\u8BF7\u6C42\u8FD4\u56DE\u5185\u5BB9\\n&#39;</span><span class="token punctuation">,</span> body <span class="token punctuation">)</span>
					<span class="token function">reject</span><span class="token punctuation">(</span> e <span class="token punctuation">)</span>
				<span class="token punctuation">}</span>
			<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
				<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> <span class="token string">&#39;\u8BF7\u6C42\u8FD4\u56DE\u5185\u5BB9\\n&#39;</span><span class="token punctuation">,</span> body <span class="token punctuation">)</span>
				<span class="token function">reject</span><span class="token punctuation">(</span> error <span class="token punctuation">)</span>
			<span class="token punctuation">}</span>
		<span class="token punctuation">}</span> <span class="token punctuation">)</span>
	<span class="token punctuation">}</span> <span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>request \u7684\u53E6\u5916\u4E00\u79CD\u7528\u6CD5\uFF0C\u548Ckoa\u914D\u5408\u8F6C\u53D1\u9632\u76D7\u94FE\u94FE\u63A5</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token doc-comment comment">/**
 * \u5916\u94FE\u56FE\u7247\u8F6C\u6210\u672C\u57DF
 * <span class="token keyword">@type</span> <span class="token class-name"><span class="token punctuation">{</span><span class="token punctuation">[</span>type<span class="token punctuation">]</span><span class="token punctuation">}</span></span>
 */</span>
<span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">imageRequest</span> <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">(</span> <span class="token parameter">ctx<span class="token punctuation">,</span> next</span> <span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
	<span class="token keyword">await</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span> <span class="token keyword">function</span> <span class="token punctuation">(</span> <span class="token parameter">resolve<span class="token punctuation">,</span> reject</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token keyword">let</span> url <span class="token operator">=</span> ctx<span class="token punctuation">.</span>query<span class="token punctuation">.</span>url
			<span class="token comment">// console.log( url );</span>
			<span class="token keyword">var</span> req <span class="token operator">=</span> <span class="token function">request</span><span class="token punctuation">(</span> <span class="token punctuation">{</span>
				<span class="token literal-property property">method</span><span class="token operator">:</span> <span class="token string">&#39;GET&#39;</span><span class="token punctuation">,</span>
				<span class="token literal-property property">encoding</span><span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>
				<span class="token literal-property property">uri</span><span class="token operator">:</span> url
			<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span> <span class="token parameter">err<span class="token punctuation">,</span> response<span class="token punctuation">,</span> body</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span>
				<span class="token keyword">if</span> <span class="token punctuation">(</span> err <span class="token punctuation">)</span> <span class="token punctuation">{</span>
					<span class="token keyword">return</span> <span class="token function">reject</span><span class="token punctuation">(</span> err <span class="token punctuation">)</span>
				<span class="token punctuation">}</span>
				<span class="token function">resolve</span><span class="token punctuation">(</span> body <span class="token punctuation">)</span>
			<span class="token punctuation">}</span> <span class="token punctuation">)</span>
		<span class="token punctuation">}</span> <span class="token punctuation">)</span>
		<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span> <span class="token punctuation">(</span> <span class="token parameter">body</span> <span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
			ctx<span class="token punctuation">.</span>status <span class="token operator">=</span> <span class="token number">200</span>
			ctx<span class="token punctuation">.</span>type <span class="token operator">=</span> <span class="token string">&#39;jpg&#39;</span>
			ctx<span class="token punctuation">.</span>length <span class="token operator">=</span> Buffer<span class="token punctuation">.</span><span class="token function">byteLength</span><span class="token punctuation">(</span> body <span class="token punctuation">)</span>
			ctx<span class="token punctuation">.</span>body <span class="token operator">=</span> body
		<span class="token punctuation">}</span> <span class="token punctuation">)</span>
		<span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span> <span class="token punctuation">(</span> <span class="token parameter">err</span> <span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
			console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span> err <span class="token punctuation">)</span>
		<span class="token punctuation">}</span> <span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,6);function p(o,e){return t}var l=n(a,[["render",p],["__file","node-request.html.vue"]]);export{l as default};
